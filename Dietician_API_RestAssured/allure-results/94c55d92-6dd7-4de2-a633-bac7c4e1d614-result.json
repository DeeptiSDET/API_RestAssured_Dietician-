{"uuid":"94c55d92-6dd7-4de2-a633-bac7c4e1d614","historyId":"e9edf8fa1a913585c1a79111d08707f3","fullName":"Update Patient with Put: Check if user able to update a Patient with valid endpoint and request body (non existing values)","labels":[{"name":"host","value":"Shaunenoch"},{"name":"thread","value":"31272@Shaunenoch.main(1)"},{"name":"feature","value":"Update Patient with Put"},{"name":"story","value":"Check if user able to update a Patient with valid endpoint and request body (non existing values)"},{"name":"suite","value":"Update Patient with Put"},{"name":"testClass","value":"Check if user able to update a Patient with valid endpoint and request body (non existing values)"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///C:/Users/shaun/git/repository3/DieticianAPI_RestAssured/src/test/resources/Feature/CPut.feature"},{"name":"package","value":"src.test.resources.Feature.CPut_feature.Update Patient with Put"}],"links":[],"name":"Check if user able to update a Patient with valid endpoint and request body (non existing values)","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"baseURI cannot be null","trace":"java.lang.IllegalArgumentException: baseURI cannot be null\r\n\tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\r\n\tat io.restassured.internal.common.assertion.AssertParameter.notNull(AssertParameter.groovy:26)\r\n\tat io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:53)\r\n\tat io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)\r\n\tat io.restassured.internal.RequestSpecificationImpl.<init>(RequestSpecificationImpl.groovy:134)\r\n\tat io.restassured.RestAssured.createTestSpecification(RestAssured.java:1453)\r\n\tat io.restassured.RestAssured.given(RestAssured.java:654)\r\n\tat api.endpoints.PutPatient.UpdatePatient(PutPatient.java:25)\r\n\tat api.stepdefinition.Put_StepDefinition.user_sends_http_request_and_request_body_with_fields_and_files_from_with(Put_StepDefinition.java:87)\r\n\tat ✽.Submit PUT request with \"put\" and \"Put_Patient_Invalid_Allergy\"(file:///C:/Users/shaun/git/repository3/DieticianAPI_RestAssured/src/test/resources/Feature/CPut.feature:10)\r\n"},"stage":"finished","steps":[{"name":"Given  User is a registered Dietician with the valid \"<password>\" and \"<UserLoginEmail>\"","status":"passed","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1700597146966,"stop":1700597147365},{"name":"When  User sends HTTP POST Request for the User login with valid endpoint","status":"passed","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1700597147366,"stop":1700597147383},{"name":"Then  User receives Bearer Token in response","status":"passed","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1700597147384,"stop":1700597147388},{"name":"Given  A valid existing Patient Id with request values from \"put\" row \"Put_Patient_Invalid_Allergy\"","status":"passed","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1700597147389,"stop":1700597147534},{"name":"When  Submit PUT request with \"put\" and \"Put_Patient_Invalid_Allergy\"","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"baseURI cannot be null","trace":"java.lang.IllegalArgumentException: baseURI cannot be null\r\n\tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\r\n\tat io.restassured.internal.common.assertion.AssertParameter.notNull(AssertParameter.groovy:26)\r\n\tat io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:53)\r\n\tat io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)\r\n\tat io.restassured.internal.RequestSpecificationImpl.<init>(RequestSpecificationImpl.groovy:134)\r\n\tat io.restassured.RestAssured.createTestSpecification(RestAssured.java:1453)\r\n\tat io.restassured.RestAssured.given(RestAssured.java:654)\r\n\tat api.endpoints.PutPatient.UpdatePatient(PutPatient.java:25)\r\n\tat api.stepdefinition.Put_StepDefinition.user_sends_http_request_and_request_body_with_fields_and_files_from_with(Put_StepDefinition.java:87)\r\n\tat ✽.Submit PUT request with \"put\" and \"Put_Patient_Invalid_Allergy\"(file:///C:/Users/shaun/git/repository3/DieticianAPI_RestAssured/src/test/resources/Feature/CPut.feature:10)\r\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1700597147535,"stop":1700597147541},{"name":"Then  User receives response for PUT \"put\" with \"Put_Patient_Invalid_Allergy\"","status":"skipped","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1700597147547,"stop":1700597147547}],"attachments":[],"parameters":[{"name":"sheetName","value":"put"},{"name":"header","value":"Put_Patient_Invalid_Allergy"}],"start":1700597146966,"stop":1700597147547}